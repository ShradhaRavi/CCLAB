package temperature;
import org.apache.hadoop.fs.*;
import org.apache.hadoop.io.*;
import org.apache.hadoop.mapred.*;

public class driver
{
public stativ voic main(String args[]) throws Exception
{
JobConf conf = new JobConf(driver.class);
conf.setMapperClass(mapper.class);
conf.setReducerClass(reducer.class);
conf.setOutputKeyClass(Text.class);
conf.setOutputValueClass(IntWritable.class);
FileInputFormat.addInputPath(conf,new Path(args[0]));
FileOutputFormat.setOutputPath(conf, new Path(args[1]));
JobClient.runJob(conf);
}
}

package temp;
imprt java.io.IOException;
import java.util.Iterator;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.mapred.Mapper;
import org.apache.hadoop.mapred.MapReduceBase;
import org.apache.hadoop.mapred.OutputCollector;
import org.apache.hadoop.mapred.Reporter;

public class reducer extends MapReduceBase implements Reducer <Text, IntWritable,Text,Text>
{
public void reduce(Text key, Iterator<IntWritable> value1, OutputCollector<Text,Text> values,Reporter r) throws IOException
{
int maxvalue=Interger.MIN_VALUE;
int minvalue=Integer.MAX_VALUE;
while(value1().hasNext())
{
maxvalue=Math.max(maxvalue, value1().next().get());
minvalue=Math.min(minvalue,value1().next().get());
}
String outputValue="Min temp="+minvalue+" and Max temp="+maxvalue;
values.collect(Key,new Text(outputValue));
}}


package temp;
import java.io.IOException;
import org.apache.io.*;
import org.apache.mapred.MapReduceBase;
import org.apache.hadoop.mapred.Mapper;
import org.apache.hadoop.mapred.OutputCollector;
import org.apache.hadoop.Reporter;

public class mapper extends MapReduceBase implements Mapper<LongWritable, Text,Text,IntWritable>
{
public void map(LongWritalbe Key, Text value, OutputCollector<Text,IntWritable> values,Reporter r) throws IOException
{
String s=value.toString();
String s1=s.substring(15,19);
int temp;
if(s.charAt(87)=='+')
{
temp=Integer.parseInt(s.substring(88,92));
}
else
{
temp=Integer.parseInt(s.substring(87,92));
}
values.collect(net Text(s1),new IntWritable(temp));
}
